---
title: "Rapport descriptif des besoins et services"
format: 
  html:
    code-fold: false       # ne pas afficher le code
    code-tools: false
    echo: false            # ne pas afficher les blocs de code
    warning: false         # ne pas afficher les avertissements
    message: false         # ne pas afficher les messages
editor: visual
lang: fr
---

```{r setup, include=FALSE}
library(tidyverse)
library(readxl)
library(knitr)
library(kableExtra)
``` 

```{r}
df_smonkey_t1 <- read_excel("C:/Users/planteb/MesProjets/parcours-familiaux/data/df_smonkey_t1.xlsx") %>%
  mutate(id = if_else(id == "F021", "F021_JSV", id)) %>%
  filter(vague == 1)

df_socio <- read_excel("C:/Users/planteb/MesProjets/parcours-familiaux/raw_data/PF_base_de_donnees_sociodémographique_T1_20250319.xlsx", sheet = "Questionnaire_sociodémographiqu") %>%
  filter(vague == 1)

df_smonkey_t1_socio <- left_join(df_socio, df_smonkey_t1, by = "id")

# Regroupement des diplômes
df_smonkey_t1_socio <- df_smonkey_t1_socio %>%
  mutate(diplome_titre = case_when(
    diplome_titre %in% c("AEC (Attestation d’études collégiales)", "DEC (Diplôme d’études collégiales – études techniques)") ~ "Études collégiales",
    diplome_titre %in% c("DEP (Diplôme d’études professionnelles)", "FMS (Formation métier semi-spécialisé)",
                        "Autre : Aide de service (mécanique)", "Autre : cartes carlewn (céramique)") ~ "Formations professionnelles",
    diplome_titre %in% c("Baccalauréat", "Certificat universitaire") ~ "Études universitaires",
    TRUE ~ diplome_titre
  )) %>%
  filter(!is.na(diplome_titre))

# Données nettoyées pour les analyses
df_smonkey_t1_socio_service <- df_smonkey_t1_socio %>%
  filter(!grepl("_E$", id)) %>%
  filter(!id %in% c("F021_MG", "F006_PLT")) %>%
  rowwise() %>%
  mutate(satisfaction_score = sum(c_across(starts_with("satisfaction_")), na.rm = TRUE)) %>%
  ungroup() %>%
  select(id, genre, modalite_garde, diplome_titre, occupation, revenu_familial, starts_with("besoin_"), ends_with("_score"))
```

```{r}
df_smonkey_t1_socio_service %>%
  count(genre) %>%
  mutate(pourcentage = round(100 * n / sum(n), 1)) %>%
  kbl(caption = "Répartition par genre") %>%
  kable_styling()


df_smonkey_t1_socio_service %>%
  count(diplome_titre) %>%
  mutate(pourcentage = round(100 * n / sum(n), 1)) %>%
  kbl(caption = "Répartition selon le niveau de diplôme") %>%
  kable_styling()

df_smonkey_t1_socio_service %>%
  count(genre, occupation) %>%
  pivot_wider(names_from = genre, values_from = n, values_fill = 0) %>%
  kbl(caption = "Occupation selon le genre (hommes et femmes côte à côte)") %>%
  kable_styling()
```

```{r}
df_famille_unique <- df_smonkey_t1_socio_service %>%
  mutate(id_famille = substr(id, 1, 4)) %>%
  group_by(id_famille) %>%
  slice(1) %>%
  ungroup() %>%
  select(id_famille, modalite_garde, revenu_familial) %>%
  mutate(modalite_garde = as.factor(modalite_garde), revenu_familial = as.factor(revenu_familial))

resume_modalite_garde <- df_famille_unique %>%
  count(modalite_garde) %>%
  mutate(pourcentage = round(100 * n / sum(n), 1))

resume_modalite_garde %>%
  kbl(caption = "Modalité de garde (niveau familial)") %>%
  kable_styling()

resume_revenu_familial <- df_famille_unique %>%
  count(revenu_familial) %>%
  mutate(pourcentage = round(100 * n / sum(n), 1))

resume_revenu_familial %>%
  kbl(caption = "Revenu familial (niveau familial)") %>%
  kable_styling()
```

```{r}
df_smonkey_t1_socio_service_clean <- df_smonkey_t1_socio_service %>%
  filter(satisfaction_score > 0)

df_smonkey_t1_socio_service_clean %>%
  summarise(
    min = min(satisfaction_score, na.rm = TRUE),
    max = max(satisfaction_score, na.rm = TRUE),
    mean = mean(satisfaction_score, na.rm = TRUE),
    median = median(satisfaction_score, na.rm = TRUE),
    sd = sd(satisfaction_score, na.rm = TRUE),
    n = n()
  ) %>%
  kbl(caption = "Statistiques descriptives du score de satisfaction") %>%
  kable_styling()
```

```{r}
df_smonkey_t1_socio_service %>%
  select(id, starts_with("besoin_")) %>%
  pivot_longer(cols = starts_with("besoin_"), names_to = "besoin", values_to = "score") %>%
  filter(!grepl("(_satisfaction|_ocf)$", besoin)) %>%
  mutate(mentionne = ifelse(score >= 3, 1, 0)) %>%
  group_by(besoin) %>%
  summarise(
    n = n(),
    n_mentionne = sum(mentionne, na.rm = TRUE),
    pourcentage = round(100 * n_mentionne / n, 1)
  ) %>%
  mutate(besoin = recode(besoin,
                         "besoin_finance" = "Finances",
                         "besoin_soins" = "Soins",
                         "besoin_repit" = "Répit",
                         "besoin_domestique" = "Tâches domestiques",
                         "besoin_emotion" = "Soutien émotionnel")) %>%
  ggplot(aes(x = reorder(besoin, -pourcentage), y = pourcentage)) +
  geom_col(fill = "steelblue") +
  geom_text(aes(label = paste0(pourcentage, "%")), vjust = -0.5, size = 4) +
  labs(
    title = "Proportion de participants ayant mentionné un besoin (score ≥ 3)",
    x = "Type de besoin",
    y = "Pourcentage (%)"
  ) +
  ylim(0, 100) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 25, hjust = 1))
```

```{r}
df_besoins_profils <- df_smonkey_t1_socio_service %>%
  mutate(
    nb_besoins_mentionnes = rowSums(across(
      c(besoin_finance, besoin_soins, besoin_repit, besoin_domestique, besoin_emotion),
      ~ .x >= 3
    ), na.rm = TRUE)
  )

df_besoins_profils %>%
  count(nb_besoins_mentionnes) %>%
  mutate(pourcentage = round(100 * n / sum(n), 1)) %>%
  kbl(caption = "Nombre de besoins mentionnés par participant·e") %>%
  kable_styling()


# Visualisation des besoins cumulés

df_besoins_profils %>%
  count(nb_besoins_mentionnes) %>%
  ggplot(aes(x = factor(nb_besoins_mentionnes), y = n)) +
  geom_col(fill = "darkorchid") +
  geom_text(aes(label = n), vjust = -0.5) +
  labs(
    title = "Nombre de besoins mentionnés par participant·e",
    x = "Nombre de besoins (score ≥ 3)",
    y = "Nombre de participant·e·s"
  ) +
  theme_minimal()
```

```{r}
df_smonkey_t1_socio_service %>%
  select(id, ends_with("_satisfaction")) %>%
  pivot_longer(cols = -id, names_to = "domaine", values_to = "satisfaction") %>%
  group_by(domaine) %>%
  summarise(
    n = sum(!is.na(satisfaction)),
    moyenne = round(mean(satisfaction, na.rm = TRUE), 2),
    ecart_type = round(sd(satisfaction, na.rm = TRUE), 2)
  ) %>%
  mutate(domaine = recode(domaine,
                          "besoin_finance_satisfaction" = "Finances",
                          "besoin_soins_satisfaction" = "Soins",
                          "besoin_repit_satisfaction" = "Répit",
                          "besoin_domestique_satisfaction" = "Tâches domestiques",
                          "besoin_emotion_satisfaction" = "Soutien émotionnel")) %>%
  kbl(caption = "Statistiques de satisfaction par domaine") %>%
  kable_styling()
```

```{r}
df_smonkey_t1_socio_service %>%
  select(id, ends_with("_satisfaction")) %>%
  pivot_longer(cols = -id, names_to = "domaine", values_to = "satisfaction") %>%
  mutate(domaine = recode(domaine,
                          "besoin_finance_satisfaction" = "Finances",
                          "besoin_soins_satisfaction" = "Soins",
                          "besoin_repit_satisfaction" = "Répit",
                          "besoin_domestique_satisfaction" = "Tâches domestiques",
                          "besoin_emotion_satisfaction" = "Soutien émotionnel")) %>%
  ggplot(aes(x = domaine, y = satisfaction)) +
  geom_boxplot(fill = "lightgreen", color = "darkgreen") +
  labs(
    title = "Distribution de la satisfaction reçue par domaine",
    x = "Domaine",
    y = "Score de satisfaction (1 à 6)"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 25, hjust = 1))
```

```{r}
df_nb_service <- read_excel("C:/Users/planteb/MesProjets/parcours-familiaux/raw_data/PF_base_de_donnees_sociodémographique_T1_20250414.xlsx", sheet = "Question services") %>%
  filter(vague == 1) %>%
  filter(!is.na(nb_services_total)) %>%
  distinct(id, .keep_all = TRUE)

df_long_nb_service <- df_nb_service %>%
  select(id, nb_services_public, nb_services_dpj, nb_services_comm, nb_services_prive) %>%
  pivot_longer(-id, names_to = "type_service", values_to = "nb_services")

df_long_nb_service %>%
  group_by(type_service) %>%
  summarise(total = sum(nb_services, na.rm = TRUE)) %>%
  ggplot(aes(x = type_service, y = total, fill = type_service)) +
  geom_col() +
  labs(title = "Total des services reçus par type", x = "Type de service", y = "Total") +
  theme_minimal()
```
